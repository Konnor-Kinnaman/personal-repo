
Lab6_7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  0000083e  000008b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000083e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001309  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ddf  00000000  00000000  00001d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007e6  00000000  00000000  00002b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  00003324  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006b3  00000000  00000000  0000352c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000505  00000000  00000000  00003bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000040e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	57 c1       	rjmp	.+686    	; 0x378 <__vector_50>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e3       	ldi	r30, 0x3E	; 62
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 37       	cpi	r26, 0x70	; 112
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	e3 d1       	rcall	.+966    	; 0x4d6 <main>
 110:	94 c3       	rjmp	.+1832   	; 0x83a <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <initDebugTimer>:
	Uses Timer5 with a prescaler of 256, and enables overflow interrupt
*/
void initDebugTimer()
{
	//Prescaler 256
	TCCR5B |= (1<<CS52) | (1<<CS50);
 114:	e1 e2       	ldi	r30, 0x21	; 33
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	80 81       	ld	r24, Z
 11a:	85 60       	ori	r24, 0x05	; 5
 11c:	80 83       	st	Z, r24
	
	//15625 TOP Value for UPDATE_FREQUENCY
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 11e:	85 ee       	ldi	r24, 0xE5	; 229
 120:	99 ef       	ldi	r25, 0xF9	; 249
 122:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 126:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	
	//Enable Timer Overflow Interrupt
	TIMSK5 = (1<<TOIE5);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
 130:	08 95       	ret

00000132 <initDebugUSART>:
	8-bits, 25000 Baud Rate
*/
void initDebugUSART()
{
	//Enable RX and TX
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 132:	88 e1       	ldi	r24, 0x18	; 24
 134:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	//Set Communication Modes
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	//8 Data bits
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	UBRR0 = 3;							//250000 Baud Rate	
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 146:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 14a:	08 95       	ret

0000014c <initDebug>:
	Configures the USART registers for data transmission, Configures the
	Timer registers, and enables interrupts.
*/
void initDebug()
{
	initDebugUSART();
 14c:	f2 df       	rcall	.-28     	; 0x132 <initDebugUSART>
	initDebugTimer();
 14e:	e2 df       	rcall	.-60     	; 0x114 <initDebugTimer>
 150:	78 94       	sei
	sei();
 152:	08 95       	ret

00000154 <UART0Out>:
 154:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	Sends 8-bit unsigned integer out UART0
*/
void UART0Out(uint8_t data) 
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 158:	95 ff       	sbrs	r25, 5
 15a:	fc cf       	rjmp	.-8      	; 0x154 <UART0Out>
	
	//Set register for next transmission
	UDR0 = data;	
 15c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 160:	08 95       	ret

00000162 <sendStopBit>:
	Sends 0x0A to signify stop
*/
void sendStopBit()
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 162:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 166:	85 ff       	sbrs	r24, 5
 168:	fc cf       	rjmp	.-8      	; 0x162 <sendStopBit>
	
	//Set register for next transmission
	UDR0 = 0x0A;
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 170:	08 95       	ret

00000172 <UART0PrintString>:

Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
	while(*strPtr != 0x00) 
 178:	02 c0       	rjmp	.+4      	; 0x17e <UART0PrintString+0xc>
	{
		UART0Out(*strPtr);
 17a:	ec df       	rcall	.-40     	; 0x154 <UART0Out>
		strPtr ++;
 17c:	21 96       	adiw	r28, 0x01	; 1
Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
	while(*strPtr != 0x00) 
 17e:	88 81       	ld	r24, Y
 180:	81 11       	cpse	r24, r1
 182:	fb cf       	rjmp	.-10     	; 0x17a <UART0PrintString+0x8>
	{
		UART0Out(*strPtr);
		strPtr ++;
	}
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <sendPortData>:
Description:
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
 18a:	cf 93       	push	r28
	for (uint8_t i=0; i<18; i++)
 18c:	c0 e0       	ldi	r28, 0x00	; 0
 18e:	0c c0       	rjmp	.+24     	; 0x1a8 <sendPortData+0x1e>
	{
		UART0Out(*portAddr[i]);
 190:	ec 2f       	mov	r30, r28
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	ec 5b       	subi	r30, 0xBC	; 188
 19a:	fd 4f       	sbci	r31, 0xFD	; 253
 19c:	01 90       	ld	r0, Z+
 19e:	f0 81       	ld	r31, Z
 1a0:	e0 2d       	mov	r30, r0
 1a2:	80 81       	ld	r24, Z
 1a4:	d7 df       	rcall	.-82     	; 0x154 <UART0Out>
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
	for (uint8_t i=0; i<18; i++)
 1a6:	cf 5f       	subi	r28, 0xFF	; 255
 1a8:	c2 31       	cpi	r28, 0x12	; 18
 1aa:	90 f3       	brcs	.-28     	; 0x190 <sendPortData+0x6>
	{
		UART0Out(*portAddr[i]);
	}
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <sendTimerData>:
Description:
	Loops though timerAddr array and sends
	out data at each address
*/
void sendTimerData()
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <sendTimerData+0x20>
	{
		UART0Out(*timerAddr[i]);
 1b8:	ec 2f       	mov	r30, r28
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e8 5e       	subi	r30, 0xE8	; 232
 1c2:	fd 4f       	sbci	r31, 0xFD	; 253
 1c4:	01 90       	ld	r0, Z+
 1c6:	f0 81       	ld	r31, Z
 1c8:	e0 2d       	mov	r30, r0
 1ca:	80 81       	ld	r24, Z
 1cc:	c3 df       	rcall	.-122    	; 0x154 <UART0Out>
	out data at each address
*/
void sendTimerData()
{
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1ce:	cf 5f       	subi	r28, 0xFF	; 255
 1d0:	c3 30       	cpi	r28, 0x03	; 3
 1d2:	90 f3       	brcs	.-28     	; 0x1b8 <sendTimerData+0x8>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR0A
	UART0Out(*timerAddr[3]);
 1d4:	c8 e1       	ldi	r28, 0x18	; 24
 1d6:	d2 e0       	ldi	r29, 0x02	; 2
 1d8:	ee 81       	ldd	r30, Y+6	; 0x06
 1da:	ff 81       	ldd	r31, Y+7	; 0x07
 1dc:	80 81       	ld	r24, Z
 1de:	ba df       	rcall	.-140    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[3]+1));
 1e0:	ee 81       	ldd	r30, Y+6	; 0x06
 1e2:	ff 81       	ldd	r31, Y+7	; 0x07
 1e4:	81 81       	ldd	r24, Z+1	; 0x01
 1e6:	b6 df       	rcall	.-148    	; 0x154 <UART0Out>
	
	//OCR0B
	UART0Out(*timerAddr[4]);
 1e8:	e8 85       	ldd	r30, Y+8	; 0x08
 1ea:	f9 85       	ldd	r31, Y+9	; 0x09
 1ec:	80 81       	ld	r24, Z
 1ee:	b2 df       	rcall	.-156    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[4]+1));
 1f0:	e8 85       	ldd	r30, Y+8	; 0x08
 1f2:	f9 85       	ldd	r31, Y+9	; 0x09
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	ae df       	rcall	.-164    	; 0x154 <UART0Out>
 1f8:	c5 e0       	ldi	r28, 0x05	; 5
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 1fa:	0c c0       	rjmp	.+24     	; 0x214 <sendTimerData+0x64>
 1fc:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	e8 5e       	subi	r30, 0xE8	; 232
 206:	fd 4f       	sbci	r31, 0xFD	; 253
 208:	01 90       	ld	r0, Z+
 20a:	f0 81       	ld	r31, Z
 20c:	e0 2d       	mov	r30, r0
 20e:	80 81       	ld	r24, Z
 210:	a1 df       	rcall	.-190    	; 0x154 <UART0Out>
 212:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR0B
	UART0Out(*timerAddr[4]);
	UART0Out(*(timerAddr[4]+1));
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 214:	c8 30       	cpi	r28, 0x08	; 8
 216:	90 f3       	brcs	.-28     	; 0x1fc <sendTimerData+0x4c>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR1A
	UART0Out(*timerAddr[8]);
 218:	c8 e1       	ldi	r28, 0x18	; 24
 21a:	d2 e0       	ldi	r29, 0x02	; 2
 21c:	e8 89       	ldd	r30, Y+16	; 0x10
 21e:	f9 89       	ldd	r31, Y+17	; 0x11
 220:	80 81       	ld	r24, Z
 222:	98 df       	rcall	.-208    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[8]+1));
 224:	e8 89       	ldd	r30, Y+16	; 0x10
 226:	f9 89       	ldd	r31, Y+17	; 0x11
 228:	81 81       	ldd	r24, Z+1	; 0x01
 22a:	94 df       	rcall	.-216    	; 0x154 <UART0Out>
	
	//OCR1B
	UART0Out(*timerAddr[9]);
 22c:	ea 89       	ldd	r30, Y+18	; 0x12
 22e:	fb 89       	ldd	r31, Y+19	; 0x13
 230:	80 81       	ld	r24, Z
 232:	90 df       	rcall	.-224    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[9]+1));
 234:	ea 89       	ldd	r30, Y+18	; 0x12
 236:	fb 89       	ldd	r31, Y+19	; 0x13
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	8c df       	rcall	.-232    	; 0x154 <UART0Out>
	
	//OCR1C
	UART0Out(*timerAddr[10]);
 23c:	ec 89       	ldd	r30, Y+20	; 0x14
 23e:	fd 89       	ldd	r31, Y+21	; 0x15
 240:	80 81       	ld	r24, Z
 242:	88 df       	rcall	.-240    	; 0x154 <UART0Out>
 244:	ec 89       	ldd	r30, Y+20	; 0x14
	UART0Out(*(timerAddr[10]+1));
 246:	fd 89       	ldd	r31, Y+21	; 0x15
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	84 df       	rcall	.-248    	; 0x154 <UART0Out>
 24c:	cb e0       	ldi	r28, 0x0B	; 11
 24e:	0c c0       	rjmp	.+24     	; 0x268 <sendTimerData+0xb8>
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 250:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	e8 5e       	subi	r30, 0xE8	; 232
 25a:	fd 4f       	sbci	r31, 0xFD	; 253
 25c:	01 90       	ld	r0, Z+
 25e:	f0 81       	ld	r31, Z
 260:	e0 2d       	mov	r30, r0
 262:	80 81       	ld	r24, Z
 264:	77 df       	rcall	.-274    	; 0x154 <UART0Out>
 266:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR1C
	UART0Out(*timerAddr[10]);
	UART0Out(*(timerAddr[10]+1));
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 268:	ce 30       	cpi	r28, 0x0E	; 14
 26a:	90 f3       	brcs	.-28     	; 0x250 <sendTimerData+0xa0>
 26c:	c8 e1       	ldi	r28, 0x18	; 24
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR2A
	UART0Out(*timerAddr[14]);
 26e:	d2 e0       	ldi	r29, 0x02	; 2
 270:	ec 8d       	ldd	r30, Y+28	; 0x1c
 272:	fd 8d       	ldd	r31, Y+29	; 0x1d
 274:	80 81       	ld	r24, Z
 276:	6e df       	rcall	.-292    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[14]+1));
 278:	ec 8d       	ldd	r30, Y+28	; 0x1c
 27a:	fd 8d       	ldd	r31, Y+29	; 0x1d
 27c:	81 81       	ldd	r24, Z+1	; 0x01
 27e:	6a df       	rcall	.-300    	; 0x154 <UART0Out>
 280:	ee 8d       	ldd	r30, Y+30	; 0x1e
	
	//OCR2B
	UART0Out(*timerAddr[15]);
 282:	ff 8d       	ldd	r31, Y+31	; 0x1f
 284:	80 81       	ld	r24, Z
 286:	66 df       	rcall	.-308    	; 0x154 <UART0Out>
 288:	ee 8d       	ldd	r30, Y+30	; 0x1e
 28a:	ff 8d       	ldd	r31, Y+31	; 0x1f
	UART0Out(*(timerAddr[15]+1));
 28c:	81 81       	ldd	r24, Z+1	; 0x01
 28e:	62 df       	rcall	.-316    	; 0x154 <UART0Out>
 290:	c0 e1       	ldi	r28, 0x10	; 16
 292:	0c c0       	rjmp	.+24     	; 0x2ac <sendTimerData+0xfc>
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 294:	ec 2f       	mov	r30, r28
 296:	f0 e0       	ldi	r31, 0x00	; 0
	{
		UART0Out(*timerAddr[i]);
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	e8 5e       	subi	r30, 0xE8	; 232
 29e:	fd 4f       	sbci	r31, 0xFD	; 253
 2a0:	01 90       	ld	r0, Z+
 2a2:	f0 81       	ld	r31, Z
 2a4:	e0 2d       	mov	r30, r0
 2a6:	80 81       	ld	r24, Z
 2a8:	55 df       	rcall	.-342    	; 0x154 <UART0Out>
 2aa:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR2B
	UART0Out(*timerAddr[15]);
	UART0Out(*(timerAddr[15]+1));
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 2ac:	c3 31       	cpi	r28, 0x13	; 19
 2ae:	90 f3       	brcs	.-28     	; 0x294 <sendTimerData+0xe4>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR3A
	UART0Out(*timerAddr[19]);
 2b0:	c8 e1       	ldi	r28, 0x18	; 24
 2b2:	d2 e0       	ldi	r29, 0x02	; 2
 2b4:	ee a1       	ldd	r30, Y+38	; 0x26
 2b6:	ff a1       	ldd	r31, Y+39	; 0x27
 2b8:	80 81       	ld	r24, Z
 2ba:	4c df       	rcall	.-360    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[19]+1));
 2bc:	ee a1       	ldd	r30, Y+38	; 0x26
 2be:	ff a1       	ldd	r31, Y+39	; 0x27
 2c0:	81 81       	ldd	r24, Z+1	; 0x01
 2c2:	48 df       	rcall	.-368    	; 0x154 <UART0Out>
	
	//OCR3B
	UART0Out(*timerAddr[20]);
 2c4:	e8 a5       	ldd	r30, Y+40	; 0x28
 2c6:	f9 a5       	ldd	r31, Y+41	; 0x29
 2c8:	80 81       	ld	r24, Z
 2ca:	44 df       	rcall	.-376    	; 0x154 <UART0Out>
 2cc:	e8 a5       	ldd	r30, Y+40	; 0x28
	UART0Out(*(timerAddr[20]+1));
 2ce:	f9 a5       	ldd	r31, Y+41	; 0x29
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	40 df       	rcall	.-384    	; 0x154 <UART0Out>
 2d4:	ea a5       	ldd	r30, Y+42	; 0x2a
 2d6:	fb a5       	ldd	r31, Y+43	; 0x2b
	
	//OCR3C
	UART0Out(*timerAddr[21]);
 2d8:	80 81       	ld	r24, Z
 2da:	3c df       	rcall	.-392    	; 0x154 <UART0Out>
 2dc:	ea a5       	ldd	r30, Y+42	; 0x2a
 2de:	fb a5       	ldd	r31, Y+43	; 0x2b
 2e0:	81 81       	ldd	r24, Z+1	; 0x01
	UART0Out(*(timerAddr[21]+1));
 2e2:	38 df       	rcall	.-400    	; 0x154 <UART0Out>
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <sendUSARTData>:
 2ea:	cf 93       	push	r28
}
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <sendUSARTData+0x1e>
 2f0:	ec 2f       	mov	r30, r28
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
	{
		UART0Out(*USARTAddr[i]);
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	e4 5f       	subi	r30, 0xF4	; 244
 2fa:	fd 4f       	sbci	r31, 0xFD	; 253
 2fc:	01 90       	ld	r0, Z+
 2fe:	f0 81       	ld	r31, Z
 300:	e0 2d       	mov	r30, r0
 302:	80 81       	ld	r24, Z
 304:	27 df       	rcall	.-434    	; 0x154 <UART0Out>
	Loops though USARTAddr array and sends
	out data at each address
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
 306:	cf 5f       	subi	r28, 0xFF	; 255
 308:	c6 30       	cpi	r28, 0x06	; 6
 30a:	90 f3       	brcs	.-28     	; 0x2f0 <sendUSARTData+0x6>
	{
		UART0Out(*USARTAddr[i]);
	}
}
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <sendADCData>:
Description:
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
 310:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 312:	c0 e0       	ldi	r28, 0x00	; 0
 314:	0c c0       	rjmp	.+24     	; 0x32e <sendADCData+0x1e>
	{
		UART0Out(*ADCAddr[i]);
 316:	ec 2f       	mov	r30, r28
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	ea 5f       	subi	r30, 0xFA	; 250
 320:	fd 4f       	sbci	r31, 0xFD	; 253
 322:	01 90       	ld	r0, Z+
 324:	f0 81       	ld	r31, Z
 326:	e0 2d       	mov	r30, r0
 328:	80 81       	ld	r24, Z
 32a:	14 df       	rcall	.-472    	; 0x154 <UART0Out>
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
	for (uint8_t i=0; i<3; i++)
 32c:	cf 5f       	subi	r28, 0xFF	; 255
 32e:	c3 30       	cpi	r28, 0x03	; 3
 330:	90 f3       	brcs	.-28     	; 0x316 <sendADCData+0x6>
	{
		UART0Out(*ADCAddr[i]);
	}
}
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <sendINTData>:
Description:
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
 336:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	0c c0       	rjmp	.+24     	; 0x354 <sendINTData+0x1e>
	{
		UART0Out(*intAddr[i]);
 33c:	ec 2f       	mov	r30, r28
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	ee 0f       	add	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	e0 50       	subi	r30, 0x00	; 0
 346:	fe 4f       	sbci	r31, 0xFE	; 254
 348:	01 90       	ld	r0, Z+
 34a:	f0 81       	ld	r31, Z
 34c:	e0 2d       	mov	r30, r0
 34e:	80 81       	ld	r24, Z
 350:	01 df       	rcall	.-510    	; 0x154 <UART0Out>
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
	for (uint8_t i=0; i<3; i++)
 352:	cf 5f       	subi	r28, 0xFF	; 255
 354:	c3 30       	cpi	r28, 0x03	; 3
 356:	90 f3       	brcs	.-28     	; 0x33c <sendINTData+0x6>
	{
		UART0Out(*intAddr[i]);
	}
}
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <sendRegisterData>:
Description:
	Calls each send___Data() function
*/
void sendRegisterData() 
{
	UART0PrintString(st);
 35c:	8c e6       	ldi	r24, 0x6C	; 108
 35e:	92 e0       	ldi	r25, 0x02	; 2
 360:	08 df       	rcall	.-496    	; 0x172 <UART0PrintString>
	sendStopBit();
 362:	ff de       	rcall	.-514    	; 0x162 <sendStopBit>
	
	sendPortData();
 364:	12 df       	rcall	.-476    	; 0x18a <sendPortData>
	sendTimerData();
 366:	24 df       	rcall	.-440    	; 0x1b0 <sendTimerData>
	sendUSARTData();
 368:	c0 df       	rcall	.-128    	; 0x2ea <sendUSARTData>
	sendADCData();
 36a:	d2 df       	rcall	.-92     	; 0x310 <sendADCData>
	sendINTData();
 36c:	e4 df       	rcall	.-56     	; 0x336 <sendINTData>
 36e:	88 e6       	ldi	r24, 0x68	; 104
	
	UART0PrintString(en);
 370:	92 e0       	ldi	r25, 0x02	; 2
 372:	ff de       	rcall	.-514    	; 0x172 <UART0PrintString>
 374:	f6 ce       	rjmp	.-532    	; 0x162 <sendStopBit>
 376:	08 95       	ret

00000378 <__vector_50>:
	sendStopBit();
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63

Description:
	Resets counter value then sends register data
*/
ISR(TIMER5_OVF_vect) 
{
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	0b b6       	in	r0, 0x3b	; 59
 384:	0f 92       	push	r0
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 39e:	85 ee       	ldi	r24, 0xE5	; 229
 3a0:	99 ef       	ldi	r25, 0xF9	; 249
 3a2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 3a6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	sendRegisterData();
 3aa:	d8 df       	rcall	.-80     	; 0x35c <sendRegisterData>
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0b be       	out	0x3b, r0	; 59
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <init_IO>:
    }
}

void init_IO()
{
	DDRC = 0x00;	//Set PORTA to input
 3d2:	17 b8       	out	0x07, r1	; 7
	PINC = 0xFF;
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	86 b9       	out	0x06, r24	; 6
	DDRF = 0x00;	//Set PORTF to input for ADC
 3d8:	10 ba       	out	0x10, r1	; 16
	PINF = 0xFF;
 3da:	8f b9       	out	0x0f, r24	; 15
	DDRA = 0xFF;	//Set PORTC to output
 3dc:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
 3de:	12 b8       	out	0x02, r1	; 2
	//Timer Registers
	TCNT0 = 6;
 3e0:	96 e0       	ldi	r25, 0x06	; 6
 3e2:	96 bd       	out	0x26, r25	; 38
	TCCR0A = 0;
 3e4:	14 bc       	out	0x24, r1	; 36
	TCCR0B  = 0;
 3e6:	15 bc       	out	0x25, r1	; 37
	//PWM Registers
	DDRE = 0xFF;	//Set PORTE to output for Timer3
 3e8:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;
 3ea:	1e b8       	out	0x0e, r1	; 14
 3ec:	08 95       	ret

000003ee <delay_1ms>:
}

void delay_1ms(void)
{
	TCCR0B = 0x03;	//Prescaler = 64
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	85 bd       	out	0x25, r24	; 37
	while((TIFR0 & (1<<TOV0)) == 0);	//wait until overflow flag is set
 3f2:	a8 9b       	sbis	0x15, 0	; 21
 3f4:	fe cf       	rjmp	.-4      	; 0x3f2 <delay_1ms+0x4>
	TCCR0B = 0;	//Stop Timer
 3f6:	15 bc       	out	0x25, r1	; 37
	TIFR0 |= (1<<TOV0);	//Clear overflow flag
 3f8:	85 b3       	in	r24, 0x15	; 21
 3fa:	81 60       	ori	r24, 0x01	; 1
 3fc:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 6;
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	86 bd       	out	0x26, r24	; 38
 402:	08 95       	ret

00000404 <custom_delay>:
}

void custom_delay(uint8_t delay)	//Calls 1ms delay n number of times for custom delay
{
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	18 2f       	mov	r17, r24
	for (int i = 0; i < delay; i++)
 40c:	c0 e0       	ldi	r28, 0x00	; 0
 40e:	d0 e0       	ldi	r29, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <custom_delay+0x12>
	{
		delay_1ms();
 412:	ed df       	rcall	.-38     	; 0x3ee <delay_1ms>
	TCNT0 = 6;
}

void custom_delay(uint8_t delay)	//Calls 1ms delay n number of times for custom delay
{
	for (int i = 0; i < delay; i++)
 414:	21 96       	adiw	r28, 0x01	; 1
 416:	81 2f       	mov	r24, r17
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	c8 17       	cp	r28, r24
 41c:	d9 07       	cpc	r29, r25
 41e:	cc f3       	brlt	.-14     	; 0x412 <custom_delay+0xe>
	{
		delay_1ms();
	}
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	08 95       	ret

00000428 <ramp_up_delay_n_steps>:
void ramp_up_delay_n_steps(uint8_t start, uint8_t end, uint16_t ms_time, uint8_t num_steps)
{
 428:	8f 92       	push	r8
 42a:	9f 92       	push	r9
 42c:	af 92       	push	r10
 42e:	bf 92       	push	r11
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	16 2f       	mov	r17, r22
 43c:	ea 01       	movw	r28, r20
 43e:	f2 2e       	mov	r15, r18
	uint16_t scaled_start = (start*1.0/100)*1024;
 440:	68 2f       	mov	r22, r24
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	f5 d0       	rcall	.+490    	; 0x634 <__floatsisf>
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	48 ec       	ldi	r20, 0xC8	; 200
 450:	52 e4       	ldi	r21, 0x42	; 66
 452:	5a d0       	rcall	.+180    	; 0x508 <__divsf3>
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	40 e8       	ldi	r20, 0x80	; 128
 45a:	54 e4       	ldi	r21, 0x44	; 68
 45c:	77 d1       	rcall	.+750    	; 0x74c <__mulsf3>
 45e:	bc d0       	rcall	.+376    	; 0x5d8 <__fixunssfsi>
 460:	4b 01       	movw	r8, r22
 462:	5c 01       	movw	r10, r24
	uint16_t scaled_end = (end*1.0/100)*1024;
 464:	61 2f       	mov	r22, r17
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	e3 d0       	rcall	.+454    	; 0x634 <__floatsisf>
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	48 ec       	ldi	r20, 0xC8	; 200
 474:	52 e4       	ldi	r21, 0x42	; 66
 476:	48 d0       	rcall	.+144    	; 0x508 <__divsf3>
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	40 e8       	ldi	r20, 0x80	; 128
 47e:	54 e4       	ldi	r21, 0x44	; 68
 480:	65 d1       	rcall	.+714    	; 0x74c <__mulsf3>
 482:	aa d0       	rcall	.+340    	; 0x5d8 <__fixunssfsi>
	uint16_t duty_cycle_change = (scaled_end-scaled_start)/num_steps;
 484:	cb 01       	movw	r24, r22
 486:	88 19       	sub	r24, r8
 488:	99 09       	sbc	r25, r9
 48a:	2f 2d       	mov	r18, r15
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	b9 01       	movw	r22, r18
 490:	c0 d1       	rcall	.+896    	; 0x812 <__udivmodhi4>
 492:	8b 01       	movw	r16, r22
	uint16_t step_time = ms_time/num_steps;
 494:	ce 01       	movw	r24, r28
 496:	b9 01       	movw	r22, r18
 498:	bc d1       	rcall	.+888    	; 0x812 <__udivmodhi4>
 49a:	d6 2f       	mov	r29, r22
 49c:	90 92 99 00 	sts	0x0099, r9	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
	OCR3A = scaled_start;
 4a0:	80 92 98 00 	sts	0x0098, r8	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 4a4:	c0 e0       	ldi	r28, 0x00	; 0
	for (uint8_t i=0; i<num_steps; i++)
 4a6:	0b c0       	rjmp	.+22     	; 0x4be <ramp_up_delay_n_steps+0x96>
	{
		OCR3A = OCR3A + duty_cycle_change;
 4a8:	e8 e9       	ldi	r30, 0x98	; 152
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	91 81       	ldd	r25, Z+1	; 0x01
 4b0:	80 0f       	add	r24, r16
 4b2:	91 1f       	adc	r25, r17
 4b4:	91 83       	std	Z+1, r25	; 0x01
 4b6:	80 83       	st	Z, r24
		custom_delay(step_time);
 4b8:	8d 2f       	mov	r24, r29
 4ba:	a4 df       	rcall	.-184    	; 0x404 <custom_delay>
 4bc:	cf 5f       	subi	r28, 0xFF	; 255
	uint16_t scaled_start = (start*1.0/100)*1024;
	uint16_t scaled_end = (end*1.0/100)*1024;
	uint16_t duty_cycle_change = (scaled_end-scaled_start)/num_steps;
	uint16_t step_time = ms_time/num_steps;
	OCR3A = scaled_start;
	for (uint8_t i=0; i<num_steps; i++)
 4be:	cf 15       	cp	r28, r15
 4c0:	98 f3       	brcs	.-26     	; 0x4a8 <ramp_up_delay_n_steps+0x80>
 4c2:	df 91       	pop	r29
	{
		OCR3A = OCR3A + duty_cycle_change;
		custom_delay(step_time);
	}
}
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	ff 90       	pop	r15
 4cc:	bf 90       	pop	r11
 4ce:	af 90       	pop	r10
 4d0:	9f 90       	pop	r9
 4d2:	8f 90       	pop	r8
 4d4:	08 95       	ret

000004d6 <main>:
 4d6:	7d df       	rcall	.-262    	; 0x3d2 <init_IO>
void custom_delay(uint8_t delay);
void ramp_up_delay_n_steps(uint8_t start, uint8_t end, uint16_t ms_time, uint8_t num_steps);
int main(void)
{
	init_IO();
	initDebug();
 4d8:	39 de       	rcall	.-910    	; 0x14c <initDebug>
 4da:	83 e8       	ldi	r24, 0x83	; 131
    while (1) 
    {
		TCCR3A = (1<<COM3A1)|(1<<WGM30)|(1<<WGM31);	//COM mode 2 WGM mode 1
 4dc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 4e0:	85 e0       	ldi	r24, 0x05	; 5
		TCCR3B = (1<<CS30)|(1<<CS32);	//Set prescaler to 1024
 4e2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
 4e6:	86 b1       	in	r24, 0x06	; 6
		if (PINC == 0x01)
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	31 f4       	brne	.+12     	; 0x4f8 <main+0x22>
 4ec:	28 e0       	ldi	r18, 0x08	; 8
		{
			ramp_up_delay_n_steps(10, 90, 8000, 8);
 4ee:	40 e4       	ldi	r20, 0x40	; 64
 4f0:	5f e1       	ldi	r21, 0x1F	; 31
 4f2:	6a e5       	ldi	r22, 0x5A	; 90
 4f4:	8a e0       	ldi	r24, 0x0A	; 10
 4f6:	98 df       	rcall	.-208    	; 0x428 <ramp_up_delay_n_steps>
 4f8:	86 b1       	in	r24, 0x06	; 6
		}
		if (PINC == 0x02)
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	71 f7       	brne	.-36     	; 0x4da <main+0x4>
 4fe:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
		{
			OCR3A = 0;	
 502:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 506:	e9 cf       	rjmp	.-46     	; 0x4da <main+0x4>

00000508 <__divsf3>:
 508:	0c d0       	rcall	.+24     	; 0x522 <__divsf3x>
 50a:	e6 c0       	rjmp	.+460    	; 0x6d8 <__fp_round>
 50c:	de d0       	rcall	.+444    	; 0x6ca <__fp_pscB>
 50e:	40 f0       	brcs	.+16     	; 0x520 <__divsf3+0x18>
 510:	d5 d0       	rcall	.+426    	; 0x6bc <__fp_pscA>
 512:	30 f0       	brcs	.+12     	; 0x520 <__divsf3+0x18>
 514:	21 f4       	brne	.+8      	; 0x51e <__divsf3+0x16>
 516:	5f 3f       	cpi	r21, 0xFF	; 255
 518:	19 f0       	breq	.+6      	; 0x520 <__divsf3+0x18>
 51a:	c7 c0       	rjmp	.+398    	; 0x6aa <__fp_inf>
 51c:	51 11       	cpse	r21, r1
 51e:	10 c1       	rjmp	.+544    	; 0x740 <__fp_szero>
 520:	ca c0       	rjmp	.+404    	; 0x6b6 <__fp_nan>

00000522 <__divsf3x>:
 522:	eb d0       	rcall	.+470    	; 0x6fa <__fp_split3>
 524:	98 f3       	brcs	.-26     	; 0x50c <__divsf3+0x4>

00000526 <__divsf3_pse>:
 526:	99 23       	and	r25, r25
 528:	c9 f3       	breq	.-14     	; 0x51c <__divsf3+0x14>
 52a:	55 23       	and	r21, r21
 52c:	b1 f3       	breq	.-20     	; 0x51a <__divsf3+0x12>
 52e:	95 1b       	sub	r25, r21
 530:	55 0b       	sbc	r21, r21
 532:	bb 27       	eor	r27, r27
 534:	aa 27       	eor	r26, r26
 536:	62 17       	cp	r22, r18
 538:	73 07       	cpc	r23, r19
 53a:	84 07       	cpc	r24, r20
 53c:	38 f0       	brcs	.+14     	; 0x54c <__divsf3_pse+0x26>
 53e:	9f 5f       	subi	r25, 0xFF	; 255
 540:	5f 4f       	sbci	r21, 0xFF	; 255
 542:	22 0f       	add	r18, r18
 544:	33 1f       	adc	r19, r19
 546:	44 1f       	adc	r20, r20
 548:	aa 1f       	adc	r26, r26
 54a:	a9 f3       	breq	.-22     	; 0x536 <__divsf3_pse+0x10>
 54c:	33 d0       	rcall	.+102    	; 0x5b4 <__divsf3_pse+0x8e>
 54e:	0e 2e       	mov	r0, r30
 550:	3a f0       	brmi	.+14     	; 0x560 <__divsf3_pse+0x3a>
 552:	e0 e8       	ldi	r30, 0x80	; 128
 554:	30 d0       	rcall	.+96     	; 0x5b6 <__divsf3_pse+0x90>
 556:	91 50       	subi	r25, 0x01	; 1
 558:	50 40       	sbci	r21, 0x00	; 0
 55a:	e6 95       	lsr	r30
 55c:	00 1c       	adc	r0, r0
 55e:	ca f7       	brpl	.-14     	; 0x552 <__divsf3_pse+0x2c>
 560:	29 d0       	rcall	.+82     	; 0x5b4 <__divsf3_pse+0x8e>
 562:	fe 2f       	mov	r31, r30
 564:	27 d0       	rcall	.+78     	; 0x5b4 <__divsf3_pse+0x8e>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	88 1f       	adc	r24, r24
 56c:	bb 1f       	adc	r27, r27
 56e:	26 17       	cp	r18, r22
 570:	37 07       	cpc	r19, r23
 572:	48 07       	cpc	r20, r24
 574:	ab 07       	cpc	r26, r27
 576:	b0 e8       	ldi	r27, 0x80	; 128
 578:	09 f0       	breq	.+2      	; 0x57c <__divsf3_pse+0x56>
 57a:	bb 0b       	sbc	r27, r27
 57c:	80 2d       	mov	r24, r0
 57e:	bf 01       	movw	r22, r30
 580:	ff 27       	eor	r31, r31
 582:	93 58       	subi	r25, 0x83	; 131
 584:	5f 4f       	sbci	r21, 0xFF	; 255
 586:	2a f0       	brmi	.+10     	; 0x592 <__divsf3_pse+0x6c>
 588:	9e 3f       	cpi	r25, 0xFE	; 254
 58a:	51 05       	cpc	r21, r1
 58c:	68 f0       	brcs	.+26     	; 0x5a8 <__divsf3_pse+0x82>
 58e:	8d c0       	rjmp	.+282    	; 0x6aa <__fp_inf>
 590:	d7 c0       	rjmp	.+430    	; 0x740 <__fp_szero>
 592:	5f 3f       	cpi	r21, 0xFF	; 255
 594:	ec f3       	brlt	.-6      	; 0x590 <__divsf3_pse+0x6a>
 596:	98 3e       	cpi	r25, 0xE8	; 232
 598:	dc f3       	brlt	.-10     	; 0x590 <__divsf3_pse+0x6a>
 59a:	86 95       	lsr	r24
 59c:	77 95       	ror	r23
 59e:	67 95       	ror	r22
 5a0:	b7 95       	ror	r27
 5a2:	f7 95       	ror	r31
 5a4:	9f 5f       	subi	r25, 0xFF	; 255
 5a6:	c9 f7       	brne	.-14     	; 0x59a <__divsf3_pse+0x74>
 5a8:	88 0f       	add	r24, r24
 5aa:	91 1d       	adc	r25, r1
 5ac:	96 95       	lsr	r25
 5ae:	87 95       	ror	r24
 5b0:	97 f9       	bld	r25, 7
 5b2:	08 95       	ret
 5b4:	e1 e0       	ldi	r30, 0x01	; 1
 5b6:	66 0f       	add	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	bb 1f       	adc	r27, r27
 5be:	62 17       	cp	r22, r18
 5c0:	73 07       	cpc	r23, r19
 5c2:	84 07       	cpc	r24, r20
 5c4:	ba 07       	cpc	r27, r26
 5c6:	20 f0       	brcs	.+8      	; 0x5d0 <__divsf3_pse+0xaa>
 5c8:	62 1b       	sub	r22, r18
 5ca:	73 0b       	sbc	r23, r19
 5cc:	84 0b       	sbc	r24, r20
 5ce:	ba 0b       	sbc	r27, r26
 5d0:	ee 1f       	adc	r30, r30
 5d2:	88 f7       	brcc	.-30     	; 0x5b6 <__divsf3_pse+0x90>
 5d4:	e0 95       	com	r30
 5d6:	08 95       	ret

000005d8 <__fixunssfsi>:
 5d8:	98 d0       	rcall	.+304    	; 0x70a <__fp_splitA>
 5da:	88 f0       	brcs	.+34     	; 0x5fe <__fixunssfsi+0x26>
 5dc:	9f 57       	subi	r25, 0x7F	; 127
 5de:	90 f0       	brcs	.+36     	; 0x604 <__fixunssfsi+0x2c>
 5e0:	b9 2f       	mov	r27, r25
 5e2:	99 27       	eor	r25, r25
 5e4:	b7 51       	subi	r27, 0x17	; 23
 5e6:	a0 f0       	brcs	.+40     	; 0x610 <__fixunssfsi+0x38>
 5e8:	d1 f0       	breq	.+52     	; 0x61e <__fixunssfsi+0x46>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	1a f0       	brmi	.+6      	; 0x5fa <__fixunssfsi+0x22>
 5f4:	ba 95       	dec	r27
 5f6:	c9 f7       	brne	.-14     	; 0x5ea <__fixunssfsi+0x12>
 5f8:	12 c0       	rjmp	.+36     	; 0x61e <__fixunssfsi+0x46>
 5fa:	b1 30       	cpi	r27, 0x01	; 1
 5fc:	81 f0       	breq	.+32     	; 0x61e <__fixunssfsi+0x46>
 5fe:	9f d0       	rcall	.+318    	; 0x73e <__fp_zero>
 600:	b1 e0       	ldi	r27, 0x01	; 1
 602:	08 95       	ret
 604:	9c c0       	rjmp	.+312    	; 0x73e <__fp_zero>
 606:	67 2f       	mov	r22, r23
 608:	78 2f       	mov	r23, r24
 60a:	88 27       	eor	r24, r24
 60c:	b8 5f       	subi	r27, 0xF8	; 248
 60e:	39 f0       	breq	.+14     	; 0x61e <__fixunssfsi+0x46>
 610:	b9 3f       	cpi	r27, 0xF9	; 249
 612:	cc f3       	brlt	.-14     	; 0x606 <__fixunssfsi+0x2e>
 614:	86 95       	lsr	r24
 616:	77 95       	ror	r23
 618:	67 95       	ror	r22
 61a:	b3 95       	inc	r27
 61c:	d9 f7       	brne	.-10     	; 0x614 <__fixunssfsi+0x3c>
 61e:	3e f4       	brtc	.+14     	; 0x62e <__fixunssfsi+0x56>
 620:	90 95       	com	r25
 622:	80 95       	com	r24
 624:	70 95       	com	r23
 626:	61 95       	neg	r22
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <__floatunsisf>:
 630:	e8 94       	clt
 632:	09 c0       	rjmp	.+18     	; 0x646 <__floatsisf+0x12>

00000634 <__floatsisf>:
 634:	97 fb       	bst	r25, 7
 636:	3e f4       	brtc	.+14     	; 0x646 <__floatsisf+0x12>
 638:	90 95       	com	r25
 63a:	80 95       	com	r24
 63c:	70 95       	com	r23
 63e:	61 95       	neg	r22
 640:	7f 4f       	sbci	r23, 0xFF	; 255
 642:	8f 4f       	sbci	r24, 0xFF	; 255
 644:	9f 4f       	sbci	r25, 0xFF	; 255
 646:	99 23       	and	r25, r25
 648:	a9 f0       	breq	.+42     	; 0x674 <__floatsisf+0x40>
 64a:	f9 2f       	mov	r31, r25
 64c:	96 e9       	ldi	r25, 0x96	; 150
 64e:	bb 27       	eor	r27, r27
 650:	93 95       	inc	r25
 652:	f6 95       	lsr	r31
 654:	87 95       	ror	r24
 656:	77 95       	ror	r23
 658:	67 95       	ror	r22
 65a:	b7 95       	ror	r27
 65c:	f1 11       	cpse	r31, r1
 65e:	f8 cf       	rjmp	.-16     	; 0x650 <__floatsisf+0x1c>
 660:	fa f4       	brpl	.+62     	; 0x6a0 <__floatsisf+0x6c>
 662:	bb 0f       	add	r27, r27
 664:	11 f4       	brne	.+4      	; 0x66a <__floatsisf+0x36>
 666:	60 ff       	sbrs	r22, 0
 668:	1b c0       	rjmp	.+54     	; 0x6a0 <__floatsisf+0x6c>
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8f 4f       	sbci	r24, 0xFF	; 255
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	16 c0       	rjmp	.+44     	; 0x6a0 <__floatsisf+0x6c>
 674:	88 23       	and	r24, r24
 676:	11 f0       	breq	.+4      	; 0x67c <__floatsisf+0x48>
 678:	96 e9       	ldi	r25, 0x96	; 150
 67a:	11 c0       	rjmp	.+34     	; 0x69e <__floatsisf+0x6a>
 67c:	77 23       	and	r23, r23
 67e:	21 f0       	breq	.+8      	; 0x688 <__floatsisf+0x54>
 680:	9e e8       	ldi	r25, 0x8E	; 142
 682:	87 2f       	mov	r24, r23
 684:	76 2f       	mov	r23, r22
 686:	05 c0       	rjmp	.+10     	; 0x692 <__floatsisf+0x5e>
 688:	66 23       	and	r22, r22
 68a:	71 f0       	breq	.+28     	; 0x6a8 <__floatsisf+0x74>
 68c:	96 e8       	ldi	r25, 0x86	; 134
 68e:	86 2f       	mov	r24, r22
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	2a f0       	brmi	.+10     	; 0x6a0 <__floatsisf+0x6c>
 696:	9a 95       	dec	r25
 698:	66 0f       	add	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	da f7       	brpl	.-10     	; 0x696 <__floatsisf+0x62>
 6a0:	88 0f       	add	r24, r24
 6a2:	96 95       	lsr	r25
 6a4:	87 95       	ror	r24
 6a6:	97 f9       	bld	r25, 7
 6a8:	08 95       	ret

000006aa <__fp_inf>:
 6aa:	97 f9       	bld	r25, 7
 6ac:	9f 67       	ori	r25, 0x7F	; 127
 6ae:	80 e8       	ldi	r24, 0x80	; 128
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	08 95       	ret

000006b6 <__fp_nan>:
 6b6:	9f ef       	ldi	r25, 0xFF	; 255
 6b8:	80 ec       	ldi	r24, 0xC0	; 192
 6ba:	08 95       	ret

000006bc <__fp_pscA>:
 6bc:	00 24       	eor	r0, r0
 6be:	0a 94       	dec	r0
 6c0:	16 16       	cp	r1, r22
 6c2:	17 06       	cpc	r1, r23
 6c4:	18 06       	cpc	r1, r24
 6c6:	09 06       	cpc	r0, r25
 6c8:	08 95       	ret

000006ca <__fp_pscB>:
 6ca:	00 24       	eor	r0, r0
 6cc:	0a 94       	dec	r0
 6ce:	12 16       	cp	r1, r18
 6d0:	13 06       	cpc	r1, r19
 6d2:	14 06       	cpc	r1, r20
 6d4:	05 06       	cpc	r0, r21
 6d6:	08 95       	ret

000006d8 <__fp_round>:
 6d8:	09 2e       	mov	r0, r25
 6da:	03 94       	inc	r0
 6dc:	00 0c       	add	r0, r0
 6de:	11 f4       	brne	.+4      	; 0x6e4 <__fp_round+0xc>
 6e0:	88 23       	and	r24, r24
 6e2:	52 f0       	brmi	.+20     	; 0x6f8 <__fp_round+0x20>
 6e4:	bb 0f       	add	r27, r27
 6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__fp_round+0x20>
 6e8:	bf 2b       	or	r27, r31
 6ea:	11 f4       	brne	.+4      	; 0x6f0 <__fp_round+0x18>
 6ec:	60 ff       	sbrs	r22, 0
 6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <__fp_round+0x20>
 6f0:	6f 5f       	subi	r22, 0xFF	; 255
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	8f 4f       	sbci	r24, 0xFF	; 255
 6f6:	9f 4f       	sbci	r25, 0xFF	; 255
 6f8:	08 95       	ret

000006fa <__fp_split3>:
 6fa:	57 fd       	sbrc	r21, 7
 6fc:	90 58       	subi	r25, 0x80	; 128
 6fe:	44 0f       	add	r20, r20
 700:	55 1f       	adc	r21, r21
 702:	59 f0       	breq	.+22     	; 0x71a <__fp_splitA+0x10>
 704:	5f 3f       	cpi	r21, 0xFF	; 255
 706:	71 f0       	breq	.+28     	; 0x724 <__fp_splitA+0x1a>
 708:	47 95       	ror	r20

0000070a <__fp_splitA>:
 70a:	88 0f       	add	r24, r24
 70c:	97 fb       	bst	r25, 7
 70e:	99 1f       	adc	r25, r25
 710:	61 f0       	breq	.+24     	; 0x72a <__fp_splitA+0x20>
 712:	9f 3f       	cpi	r25, 0xFF	; 255
 714:	79 f0       	breq	.+30     	; 0x734 <__fp_splitA+0x2a>
 716:	87 95       	ror	r24
 718:	08 95       	ret
 71a:	12 16       	cp	r1, r18
 71c:	13 06       	cpc	r1, r19
 71e:	14 06       	cpc	r1, r20
 720:	55 1f       	adc	r21, r21
 722:	f2 cf       	rjmp	.-28     	; 0x708 <__fp_split3+0xe>
 724:	46 95       	lsr	r20
 726:	f1 df       	rcall	.-30     	; 0x70a <__fp_splitA>
 728:	08 c0       	rjmp	.+16     	; 0x73a <__fp_splitA+0x30>
 72a:	16 16       	cp	r1, r22
 72c:	17 06       	cpc	r1, r23
 72e:	18 06       	cpc	r1, r24
 730:	99 1f       	adc	r25, r25
 732:	f1 cf       	rjmp	.-30     	; 0x716 <__fp_splitA+0xc>
 734:	86 95       	lsr	r24
 736:	71 05       	cpc	r23, r1
 738:	61 05       	cpc	r22, r1
 73a:	08 94       	sec
 73c:	08 95       	ret

0000073e <__fp_zero>:
 73e:	e8 94       	clt

00000740 <__fp_szero>:
 740:	bb 27       	eor	r27, r27
 742:	66 27       	eor	r22, r22
 744:	77 27       	eor	r23, r23
 746:	cb 01       	movw	r24, r22
 748:	97 f9       	bld	r25, 7
 74a:	08 95       	ret

0000074c <__mulsf3>:
 74c:	0b d0       	rcall	.+22     	; 0x764 <__mulsf3x>
 74e:	c4 cf       	rjmp	.-120    	; 0x6d8 <__fp_round>
 750:	b5 df       	rcall	.-150    	; 0x6bc <__fp_pscA>
 752:	28 f0       	brcs	.+10     	; 0x75e <__mulsf3+0x12>
 754:	ba df       	rcall	.-140    	; 0x6ca <__fp_pscB>
 756:	18 f0       	brcs	.+6      	; 0x75e <__mulsf3+0x12>
 758:	95 23       	and	r25, r21
 75a:	09 f0       	breq	.+2      	; 0x75e <__mulsf3+0x12>
 75c:	a6 cf       	rjmp	.-180    	; 0x6aa <__fp_inf>
 75e:	ab cf       	rjmp	.-170    	; 0x6b6 <__fp_nan>
 760:	11 24       	eor	r1, r1
 762:	ee cf       	rjmp	.-36     	; 0x740 <__fp_szero>

00000764 <__mulsf3x>:
 764:	ca df       	rcall	.-108    	; 0x6fa <__fp_split3>
 766:	a0 f3       	brcs	.-24     	; 0x750 <__mulsf3+0x4>

00000768 <__mulsf3_pse>:
 768:	95 9f       	mul	r25, r21
 76a:	d1 f3       	breq	.-12     	; 0x760 <__mulsf3+0x14>
 76c:	95 0f       	add	r25, r21
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	55 1f       	adc	r21, r21
 772:	62 9f       	mul	r22, r18
 774:	f0 01       	movw	r30, r0
 776:	72 9f       	mul	r23, r18
 778:	bb 27       	eor	r27, r27
 77a:	f0 0d       	add	r31, r0
 77c:	b1 1d       	adc	r27, r1
 77e:	63 9f       	mul	r22, r19
 780:	aa 27       	eor	r26, r26
 782:	f0 0d       	add	r31, r0
 784:	b1 1d       	adc	r27, r1
 786:	aa 1f       	adc	r26, r26
 788:	64 9f       	mul	r22, r20
 78a:	66 27       	eor	r22, r22
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	66 1f       	adc	r22, r22
 792:	82 9f       	mul	r24, r18
 794:	22 27       	eor	r18, r18
 796:	b0 0d       	add	r27, r0
 798:	a1 1d       	adc	r26, r1
 79a:	62 1f       	adc	r22, r18
 79c:	73 9f       	mul	r23, r19
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	62 1f       	adc	r22, r18
 7a4:	83 9f       	mul	r24, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	22 1f       	adc	r18, r18
 7ac:	74 9f       	mul	r23, r20
 7ae:	33 27       	eor	r19, r19
 7b0:	a0 0d       	add	r26, r0
 7b2:	61 1d       	adc	r22, r1
 7b4:	23 1f       	adc	r18, r19
 7b6:	84 9f       	mul	r24, r20
 7b8:	60 0d       	add	r22, r0
 7ba:	21 1d       	adc	r18, r1
 7bc:	82 2f       	mov	r24, r18
 7be:	76 2f       	mov	r23, r22
 7c0:	6a 2f       	mov	r22, r26
 7c2:	11 24       	eor	r1, r1
 7c4:	9f 57       	subi	r25, 0x7F	; 127
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	8a f0       	brmi	.+34     	; 0x7ec <__mulsf3_pse+0x84>
 7ca:	e1 f0       	breq	.+56     	; 0x804 <__mulsf3_pse+0x9c>
 7cc:	88 23       	and	r24, r24
 7ce:	4a f0       	brmi	.+18     	; 0x7e2 <__mulsf3_pse+0x7a>
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	bb 1f       	adc	r27, r27
 7d6:	66 1f       	adc	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	a9 f7       	brne	.-22     	; 0x7cc <__mulsf3_pse+0x64>
 7e2:	9e 3f       	cpi	r25, 0xFE	; 254
 7e4:	51 05       	cpc	r21, r1
 7e6:	70 f0       	brcs	.+28     	; 0x804 <__mulsf3_pse+0x9c>
 7e8:	60 cf       	rjmp	.-320    	; 0x6aa <__fp_inf>
 7ea:	aa cf       	rjmp	.-172    	; 0x740 <__fp_szero>
 7ec:	5f 3f       	cpi	r21, 0xFF	; 255
 7ee:	ec f3       	brlt	.-6      	; 0x7ea <__mulsf3_pse+0x82>
 7f0:	98 3e       	cpi	r25, 0xE8	; 232
 7f2:	dc f3       	brlt	.-10     	; 0x7ea <__mulsf3_pse+0x82>
 7f4:	86 95       	lsr	r24
 7f6:	77 95       	ror	r23
 7f8:	67 95       	ror	r22
 7fa:	b7 95       	ror	r27
 7fc:	f7 95       	ror	r31
 7fe:	e7 95       	ror	r30
 800:	9f 5f       	subi	r25, 0xFF	; 255
 802:	c1 f7       	brne	.-16     	; 0x7f4 <__mulsf3_pse+0x8c>
 804:	fe 2b       	or	r31, r30
 806:	88 0f       	add	r24, r24
 808:	91 1d       	adc	r25, r1
 80a:	96 95       	lsr	r25
 80c:	87 95       	ror	r24
 80e:	97 f9       	bld	r25, 7
 810:	08 95       	ret

00000812 <__udivmodhi4>:
 812:	aa 1b       	sub	r26, r26
 814:	bb 1b       	sub	r27, r27
 816:	51 e1       	ldi	r21, 0x11	; 17
 818:	07 c0       	rjmp	.+14     	; 0x828 <__udivmodhi4_ep>

0000081a <__udivmodhi4_loop>:
 81a:	aa 1f       	adc	r26, r26
 81c:	bb 1f       	adc	r27, r27
 81e:	a6 17       	cp	r26, r22
 820:	b7 07       	cpc	r27, r23
 822:	10 f0       	brcs	.+4      	; 0x828 <__udivmodhi4_ep>
 824:	a6 1b       	sub	r26, r22
 826:	b7 0b       	sbc	r27, r23

00000828 <__udivmodhi4_ep>:
 828:	88 1f       	adc	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	5a 95       	dec	r21
 82e:	a9 f7       	brne	.-22     	; 0x81a <__udivmodhi4_loop>
 830:	80 95       	com	r24
 832:	90 95       	com	r25
 834:	bc 01       	movw	r22, r24
 836:	cd 01       	movw	r24, r26
 838:	08 95       	ret

0000083a <_exit>:
 83a:	f8 94       	cli

0000083c <__stop_program>:
 83c:	ff cf       	rjmp	.-2      	; 0x83c <__stop_program>
