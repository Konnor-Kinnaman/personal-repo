
LCD_UART Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800200  00800200  00000376  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000148d  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb4  00000000  00000000  00001905  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000721  00000000  00000000  000027b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00002edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066d  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d0  00000000  00000000  00003635  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003a05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	0f c1       	rjmp	.+542    	; 0x284 <__vector_25>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	af 31       	cpi	r26, 0x1F	; 31
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	75 d0       	rcall	.+234    	; 0x1f0 <main>
 106:	fb c0       	rjmp	.+502    	; 0x2fe <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <Init_PORTs>:

/* Perform LCD initialization */
#include "LCD.h"
void Init_PORTs (void)
{
	DDRL = 0xFF;	/* PORTC all outputs */
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	PORTL = 0x00;	/* Set all outputs to 0 initially */
 110:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	DDRD = 0x07;	/* Set D.0 through A.2 to outputs for LCD control */
 114:	97 e0       	ldi	r25, 0x07	; 7
 116:	9a b9       	out	0x0a, r25	; 10
	DDRA = 0xFF;
 118:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
 11a:	12 b8       	out	0x02, r1	; 2
 11c:	08 95       	ret

0000011e <LCD_write>:
}
/* End of LCD initialization */

void LCD_write (unsigned char RS, unsigned char data)
{
	if(RS==DATA_WR) PORTD = 0b00000001;	/* write data: E = 0 R/!W=0, (write)RS = 1 ,   */
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	11 f4       	brne	.+4      	; 0x126 <LCD_write+0x8>
 122:	8b b9       	out	0x0b, r24	; 11
 124:	01 c0       	rjmp	.+2      	; 0x128 <LCD_write+0xa>
	else			PORTD = 0b00000000;	/* Write instruction: RS = 0 E = 0, R/!W=0 (write) */
 126:	1b b8       	out	0x0b, r1	; 11


	PORTD = PORTD | 0x04;	/* Take E HIGH (logic 1) */
 128:	8b b1       	in	r24, 0x0b	; 11
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	8b b9       	out	0x0b, r24	; 11
	PORTL = data;
 12e:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	87 ec       	ldi	r24, 0xC7	; 199
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_write+0x18>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_write+0x1e>
 13c:	00 00       	nop
	_delay_us(50);			/* needs to be at least 30uS or no display - use 50 */
	PORTD = PORTD & 0x01;	/* Take E LOW (logic 0) */
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	81 70       	andi	r24, 0x01	; 1
 142:	8b b9       	out	0x0b, r24	; 11
 144:	87 ec       	ldi	r24, 0xC7	; 199
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_write+0x2a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_write+0x30>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <Init_LCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f e7       	ldi	r18, 0x7F	; 127
 154:	85 eb       	ldi	r24, 0xB5	; 181
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <Init_LCD+0x6>
 160:	00 c0       	rjmp	.+0      	; 0x162 <Init_LCD+0x10>
 162:	00 00       	nop
	PORTA = 0x00;
}
void Init_LCD (void)
{
	_delay_ms(35);				/* wait for more than 30mS after VDD rises to 4.5V */
	LCD_write(INSTR_WR,0x38); 	/* function set 8bits, 2line, display off */
 164:	68 e3       	ldi	r22, 0x38	; 56
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	da df       	rcall	.-76     	; 0x11e <LCD_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	87 ec       	ldi	r24, 0xC7	; 199
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <Init_LCD+0x1c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <Init_LCD+0x22>
 174:	00 00       	nop
	_delay_us(50);				/* wait for more than 39microS */
	LCD_write(INSTR_WR,0x0C);	/* display on, cursor off, blink off */
 176:	6c e0       	ldi	r22, 0x0C	; 12
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	d1 df       	rcall	.-94     	; 0x11e <LCD_write>
 17c:	87 ec       	ldi	r24, 0xC7	; 199
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <Init_LCD+0x2e>
 184:	00 c0       	rjmp	.+0      	; 0x186 <Init_LCD+0x34>
 186:	00 00       	nop
	_delay_us(50);				/* wait for more than 39microS */
	LCD_write(INSTR_WR,0x01);	/* display clear */
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	c8 df       	rcall	.-112    	; 0x11e <LCD_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	8f e3       	ldi	r24, 0x3F	; 63
 190:	9f e1       	ldi	r25, 0x1F	; 31
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <Init_LCD+0x40>
 196:	00 c0       	rjmp	.+0      	; 0x198 <Init_LCD+0x46>
	_delay_ms(2);				/* wait for more than 1.53mS */
	LCD_write(INSTR_WR,0x06);	/* entry mode set, increment mode */
 198:	00 00       	nop
 19a:	66 e0       	ldi	r22, 0x06	; 6
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	bf cf       	rjmp	.-130    	; 0x11e <LCD_write>
 1a0:	08 95       	ret

000001a2 <Print_string>:
	PORTD = PORTD & 0x01;	/* Take E LOW (logic 0) */
	_delay_us(50);			/* Delay REQUIRED */
}

void Print_string(char *str_ptr)
{
 1a2:	fc 01       	movw	r30, r24
	PORTD = 0b00000001;	/* write data: RS = 1 E = 0, R/!W=0 (write) */
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8b b9       	out	0x0b, r24	; 11

	while(*str_ptr != '\0')
 1a8:	19 c0       	rjmp	.+50     	; 0x1dc <Print_string+0x3a>
	{
		PORTD = PORTD | 0x04;	/* Take E HIGH (logic 1) */
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	84 60       	ori	r24, 0x04	; 4
 1ae:	8b b9       	out	0x0b, r24	; 11
		PORTL = *str_ptr++;
 1b0:	9f 01       	movw	r18, r30
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	80 81       	ld	r24, Z
 1b8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	87 ec       	ldi	r24, 0xC7	; 199
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <Print_string+0x1e>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <Print_string+0x24>
 1c6:	00 00       	nop
		_delay_us(50);			/* needs to be at least 30uS or no display - use 50 */
		PORTD = PORTD & 0x01;	/* Take E LOW (logic 0) */
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	81 70       	andi	r24, 0x01	; 1
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	87 ec       	ldi	r24, 0xC7	; 199
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <Print_string+0x30>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <Print_string+0x36>
 1d8:	00 00       	nop
	PORTD = 0b00000001;	/* write data: RS = 1 E = 0, R/!W=0 (write) */

	while(*str_ptr != '\0')
	{
		PORTD = PORTD | 0x04;	/* Take E HIGH (logic 1) */
		PORTL = *str_ptr++;
 1da:	f9 01       	movw	r30, r18

void Print_string(char *str_ptr)
{
	PORTD = 0b00000001;	/* write data: RS = 1 E = 0, R/!W=0 (write) */

	while(*str_ptr != '\0')
 1dc:	80 81       	ld	r24, Z
 1de:	81 11       	cpse	r24, r1
 1e0:	e4 cf       	rjmp	.-56     	; 0x1aa <Print_string+0x8>
		PORTL = *str_ptr++;
		_delay_us(50);			/* needs to be at least 30uS or no display - use 50 */
		PORTD = PORTD & 0x01;	/* Take E LOW (logic 0) */
		_delay_us(50);			/* Delay REQUIRED */
	}
 1e2:	08 95       	ret

000001e4 <init_IO>:
		}	/* end main */
		
		
void init_IO(void)
{
	DDRA = 0xFF;
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	//Configure PORTA to output
 1e8:	12 b8       	out	0x02, r1	; 2
	DDRC = 0x00;
 1ea:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;	//Configure PORTC to input
 1ec:	88 b9       	out	0x08, r24	; 8
 1ee:	08 95       	ret

000001f0 <main>:
	char B_mess1[] = {"Test"};
	char B_mess2[] = {"Test"};

	/* MUST initialize PORTs BEFORE initializing LCD */
	/* since need to write to LCD to initialize it */
	Init_PORTs();
 1f0:	8c df       	rcall	.-232    	; 0x10a <Init_PORTs>
	init_IO();
 1f2:	f8 df       	rcall	.-16     	; 0x1e4 <init_IO>
	init_USART_IO();
 1f4:	36 d0       	rcall	.+108    	; 0x262 <init_USART_IO>
 1f6:	ad df       	rcall	.-166    	; 0x152 <Init_LCD>
	Init_LCD();
 1f8:	61 e0       	ldi	r22, 0x01	; 1


	LCD_write(INSTR_WR, 0x01);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 df       	rcall	.-224    	; 0x11e <LCD_write>
 1fe:	8f e3       	ldi	r24, 0x3F	; 63
 200:	9f e1       	ldi	r25, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0x12>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x18>
 208:	00 00       	nop
 20a:	62 e0       	ldi	r22, 0x02	; 2
	_delay_ms(2);	//can remove if use Busy Flag check

	LCD_write(INSTR_WR, 0x02);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	87 df       	rcall	.-242    	; 0x11e <LCD_write>
 210:	8f e3       	ldi	r24, 0x3F	; 63
 212:	9f e1       	ldi	r25, 0x1F	; 31
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x24>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x2a>
 21a:	00 00       	nop
 21c:	65 e8       	ldi	r22, 0x85	; 133
	_delay_ms(2);  //can remove if use Busy Flag check

	LCD_write(INSTR_WR, 0x85);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	7e df       	rcall	.-260    	; 0x11e <LCD_write>
 222:	60 ec       	ldi	r22, 0xC0	; 192
 224:	80 e0       	ldi	r24, 0x00	; 0
	//Print_string (T_mess);


	LCD_write(INSTR_WR, 0xC0);
 226:	7b df       	rcall	.-266    	; 0x11e <LCD_write>
 228:	87 ec       	ldi	r24, 0xC7	; 199
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x3c>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x42>
 232:	00 00       	nop
 234:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <LCD_update>
 238:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <LCD_update+0x1>
		LCD_write(INSTR_WR, 0xC5);	// Set DDRAM address to bottom row, left character
		_delay_us(50);	//can remove if use Busy Flag check
		Print_string (B_mess2);
		_delay_ms(2000);*/
		
		if (LCD_update == 1)
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	d1 f7       	brne	.-12     	; 0x234 <main+0x44>
 240:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <LCD_update+0x1>
		{
			LCD_update = 0;
 244:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <LCD_update>
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	80 e0       	ldi	r24, 0x00	; 0
			LCD_write(INSTR_WR, 0x01);
 24c:	68 df       	rcall	.-304    	; 0x11e <LCD_write>
 24e:	87 ec       	ldi	r24, 0xC7	; 199
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x62>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x68>
 258:	00 00       	nop
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	92 e0       	ldi	r25, 0x02	; 2
			_delay_us(50);
			Print_string(rx_buffer);
 25e:	a1 df       	rcall	.-190    	; 0x1a2 <Print_string>
 260:	e9 cf       	rjmp	.-46     	; 0x234 <main+0x44>

00000262 <init_USART_IO>:
 262:	1d b8       	out	0x0d, r1	; 13
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	8e b9       	out	0x0e, r24	; 14
{
	while ((UCSR0A & (1 << UDRE0))==0)
	{
		//wait to complete transmission
	}
	UDR0 = ch;
 268:	78 94       	sei
 26a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 26e:	98 e9       	ldi	r25, 0x98	; 152
 270:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 274:	96 e0       	ldi	r25, 0x06	; 6
 276:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 27a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 27e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 282:	08 95       	ret

00000284 <__vector_25>:
}


ISR(USART0_RX_vect)
{
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	0b b6       	in	r0, 0x3b	; 59
 290:	0f 92       	push	r0
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
	rx_char = UDR0;
 29a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 29e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <rx_char>
	if (rx_char != 0x0D)
 2a2:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <rx_char>
 2a6:	8d 30       	cpi	r24, 0x0D	; 13
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <__vector_25+0x40>
	{
		rx_buffer[n] = rx_char;
 2aa:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2ae:	e8 2f       	mov	r30, r24
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <rx_char>
 2b6:	ed 5f       	subi	r30, 0xFD	; 253
 2b8:	fd 4f       	sbci	r31, 0xFD	; 253
 2ba:	90 83       	st	Z, r25
		n++;
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
 2be:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 2c2:	0c c0       	rjmp	.+24     	; 0x2dc <__vector_25+0x58>
	}
	else if (rx_char == 0x0D)
 2c4:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <rx_char>
 2c8:	8d 30       	cpi	r24, 0x0D	; 13
 2ca:	41 f4       	brne	.+16     	; 0x2dc <__vector_25+0x58>
	{
		rx_buffer[n] = '\0';
 2cc:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	ed 5f       	subi	r30, 0xFD	; 253
 2d4:	fd 4f       	sbci	r31, 0xFD	; 253
 2d6:	10 82       	st	Z, r1
		n = 0;
 2d8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
	LCD_update = 1;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <LCD_update+0x1>
 2e4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <LCD_update>
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	0f 90       	pop	r0
 2f2:	0b be       	out	0x3b, r0	; 59
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
