
EEPROM Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000001bc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800206  00800206  00000256  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6f  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb7  00000000  00000000  0000118f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ac  00000000  00000000  00001e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000021f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e4  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ae  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002a22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec eb       	ldi	r30, 0xBC	; 188
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 30       	cpi	r26, 0x0C	; 12
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	43 d0       	rcall	.+134    	; 0x1a6 <main>
 120:	4b c0       	rjmp	.+150    	; 0x1b8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <EEPROM_write_one_char>:
 */ 

#include "EEPROM.h"

void EEPROM_write_one_char(uint16_t uiAddress, uint8_t ucData){
	EECR = 0x00;
 124:	1f ba       	out	0x1f, r1	; 31
	while (EECR & (1<<EEPE));	//Wait for previous write completion
 126:	f9 99       	sbic	0x1f, 1	; 31
 128:	fe cf       	rjmp	.-4      	; 0x126 <EEPROM_write_one_char+0x2>
	
	EEAR = uiAddress;
 12a:	92 bd       	out	0x22, r25	; 34
 12c:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
 12e:	60 bd       	out	0x20, r22	; 32
	EECR |= (1<<EEMPE);	//Write logic one to EEMPE
 130:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);	//Start EEPROM write
 132:	f9 9a       	sbi	0x1f, 1	; 31
 134:	08 95       	ret

00000136 <EEPROM_write_string>:
	
}

void EEPROM_write_string(uint8_t uiAddress, char *ucData) {
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
 13e:	fb 01       	movw	r30, r22
	uint8_t track = uiAddress;
	while(*ucData != '\0') {
 140:	60 81       	ld	r22, Z
 142:	66 23       	and	r22, r22
 144:	61 f0       	breq	.+24     	; 0x15e <EEPROM_write_string+0x28>
 146:	8f 01       	movw	r16, r30
 148:	0f 5f       	subi	r16, 0xFF	; 255
 14a:	1f 4f       	sbci	r17, 0xFF	; 255
		EEPROM_write_one_char(track, *ucData);
 14c:	8c 2f       	mov	r24, r28
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	e9 df       	rcall	.-46     	; 0x124 <EEPROM_write_one_char>
		track++;
 152:	cf 5f       	subi	r28, 0xFF	; 255
	
}

void EEPROM_write_string(uint8_t uiAddress, char *ucData) {
	uint8_t track = uiAddress;
	while(*ucData != '\0') {
 154:	f8 01       	movw	r30, r16
 156:	61 91       	ld	r22, Z+
 158:	8f 01       	movw	r16, r30
 15a:	61 11       	cpse	r22, r1
 15c:	f7 cf       	rjmp	.-18     	; 0x14c <EEPROM_write_string+0x16>
		EEPROM_write_one_char(track, *ucData);
		track++;
		ucData++;
		
	}
}
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	08 95       	ret

00000166 <EEPROM_read_one_char>:

uint8_t EEPROM_read_one_char(uint16_t uiAddress) {
	while (EECR & (1<<EEPE));
 166:	f9 99       	sbic	0x1f, 1	; 31
 168:	fe cf       	rjmp	.-4      	; 0x166 <EEPROM_read_one_char>
	
	EEAR = uiAddress;
 16a:	92 bd       	out	0x22, r25	; 34
 16c:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE);
 16e:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;
 170:	80 b5       	in	r24, 0x20	; 32
}
 172:	08 95       	ret

00000174 <EEPROM_read_string>:

void EEPROM_read_string(uint8_t uiAddress, char *EEPROM_buf_ptr) {
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
	uint16_t track = uiAddress;
 17c:	c8 2f       	mov	r28, r24
 17e:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (*(EEPROM_buf_ptr-1) != 0xFF) {
 180:	fb 01       	movw	r30, r22
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	80 81       	ld	r24, Z
 186:	8f 3f       	cpi	r24, 0xFF	; 255
 188:	49 f0       	breq	.+18     	; 0x19c <EEPROM_read_string+0x28>
 18a:	8b 01       	movw	r16, r22
		*EEPROM_buf_ptr = EEPROM_read_one_char(track);
 18c:	ce 01       	movw	r24, r28
 18e:	eb df       	rcall	.-42     	; 0x166 <EEPROM_read_one_char>
 190:	f8 01       	movw	r30, r16
 192:	81 93       	st	Z+, r24
 194:	8f 01       	movw	r16, r30
		track++;
 196:	21 96       	adiw	r28, 0x01	; 1
}

void EEPROM_read_string(uint8_t uiAddress, char *EEPROM_buf_ptr) {
	uint16_t track = uiAddress;
	
	while (*(EEPROM_buf_ptr-1) != 0xFF) {
 198:	8f 3f       	cpi	r24, 0xFF	; 255
 19a:	c1 f7       	brne	.-16     	; 0x18c <EEPROM_read_string+0x18>
		*EEPROM_buf_ptr = EEPROM_read_one_char(track);
		track++;
		EEPROM_buf_ptr++;
	}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <main>:
int main(void)
{
    while (1) 
    {
		//EEPROM_write_one_char(0x0000, 0x41);
		EEPROM_write_string(EEPROM_start_address, message);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	72 e0       	ldi	r23, 0x02	; 2
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	c4 df       	rcall	.-120    	; 0x136 <EEPROM_write_string>
		EEPROM_read_string(EEPROM_start_address, output);
 1ae:	66 e0       	ldi	r22, 0x06	; 6
 1b0:	72 e0       	ldi	r23, 0x02	; 2
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	df df       	rcall	.-66     	; 0x174 <EEPROM_read_string>
 1b6:	f7 cf       	rjmp	.-18     	; 0x1a6 <main>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
